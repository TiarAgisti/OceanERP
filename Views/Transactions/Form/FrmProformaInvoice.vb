Public Class FrmProformaInvoice

#Region "Declaration"
    Public Shared piHeaderID As Long = 0
    Public Shared fabricID As Integer
    Public Shared fabricName As String

    Public Shared buyerID As Integer
    Public Shared buyerName As String

    Public Shared customerID As Integer
    Public Shared customerCode As String
    Public Shared customerName As String
    Public Shared customerAddress As String
    Public Shared customerTlp As String
    Public Shared customerFax As String
    Public Shared customerAtten As String

    Public condition As String

    Dim intBaris As Integer
    Dim intPos As Integer
#End Region
#Region "Properties"
    Sub GridDetail()
        With dgv
            .Columns.Add(0, "Fabric ID")
            .Columns.Add(1, "Fabric Name")
            .Columns.Add(2, "Date Detail")
            .Columns.Add(3, "Color ID")
            .Columns.Add(4, "Color")
            .Columns.Add(5, "PP Sample")
            .Columns.Add(6, "Qty Cuttable")
            .Columns.Add(7, "Qty Weight")
            .Columns.Add(8, "Unit ID")
            .Columns.Add(9, "Unit")
            .Columns.Add(10, "Currency ID")
            .Columns.Add(11, "Currency")
            .Columns.Add(12, "Unit Price")
            .Columns.Add(13, "Qty")
            .Columns.Add(14, "Amount")

            .Columns(0).Visible = False
            .Columns(3).Visible = False
            .Columns(8).Visible = False
            .Columns(10).Visible = False
        End With
    End Sub
#End Region

#Region "Function"
    Sub ClearHeader()
        txtPINo.Text = AutoGenerated
        buyerID = 0
        txtBuyer.Clear()
        txtRefPO.Clear()
        txtStyle.Clear()
        txtContract.Clear()
        txtTo.Clear()
        customerID = 0
        txtAddress.Clear()
        txtTlp.Clear()
        txtFax.Clear()
        txtAttention.Clear()
        txtDelPlace.Clear()
    End Sub

    Sub ClearDetail()
        txtFabric.Clear()
        fabricID = 0
        txtPPSample.Clear()
        txtQtyCutt.Clear()
        txtQtyWeight.Clear()
        txtPrice.Clear()
        txtQty.Clear()
    End Sub
    Sub AddGridDetail()
        With dgv
            .Rows.Add()
            .Item(0, intBaris).Value = fabricID
            .Item(1, intBaris).Value = txtFabric.Text
            .Item(2, intBaris).Value = dtDateDetail.Value
            .Item(3, intBaris).Value = cmbColor.SelectedValue
            .Item(4, intBaris).Value = cmbColor.Text
            .Item(5, intBaris).Value = txtPPSample.Text
            .Item(6, intBaris).Value = txtQtyCutt.Text
            .Item(7, intBaris).Value = txtQtyWeight.Text
            .Item(8, intBaris).Value = cmbUnit.SelectedValue
            .Item(9, intBaris).Value = cmbUnit.Text
            .Item(10, intBaris).Value = cmbCurr.SelectedValue
            .Item(11, intBaris).Value = cmbCurr.Text
            .Item(12, intBaris).Value = txtPrice.Text
            .Item(13, intBaris).Value = txtQty.Text
            .Item(14, intBaris).Value = txtQty.Text * txtPrice.Text
        End With
        intBaris = intBaris + 1
        txtTotQty.Text = SumQty()
        txtGrandTotal.Text = SumAmount()
    End Sub

    Sub DeleteGridDetail()
        Me.dgv.Rows.RemoveAt(Me.dgv.CurrentCell.RowIndex)
        intBaris = intBaris - 1
        txtTotQty.Text = SumQty()
        txtGrandTotal.Text = SumAmount()
    End Sub

    Function SumAmount() As Decimal
        Dim totalAmount As Decimal
        totalAmount = 0
        For row As Integer = 0 To dgv.Rows.Count - 1
            totalAmount = totalAmount + dgv.Rows(row).Cells(14).Value
        Next
        Return totalAmount
    End Function

    Function SumQty() As Decimal
        Dim totalQty As Decimal
        totalQty = 0
        For row As Integer = 0 To dgv.Rows.Count - 1
            totalQty = totalQty + dgv.Rows(row).Cells(13).Value
        Next
        Return totalQty
    End Function

    Sub ComboBoxSeason()
        Dim seasonBFC As ClsSeason = New ClsSeason
        cmbSeason.DataSource = seasonBFC.ListComboBox()
        cmbSeason.DisplayMember = "SeasonName"
        cmbSeason.ValueMember = "SeasonID"
    End Sub

    Sub ComboBoxTOP()
        Dim topBFC As ClsTermOfPayment = New ClsTermOfPayment
        cmbTOP.DataSource = topBFC.ListComboBoxTerm
        cmbTOP.DisplayMember = "Name"
        cmbTOP.ValueMember = "TermOfPaymentID"
    End Sub

    Sub ComboBoxTermOfPrice()
        Dim priceBFC As ClsTermOfPrice = New ClsTermOfPrice
        cmbTermPrice.DataSource = priceBFC.ListComboBox
        cmbTermPrice.DisplayMember = "Name"
        cmbTermPrice.ValueMember = "TermOfPriceID"
    End Sub

    Sub ComboBoxGroupSales()
        Dim salesBFC As ClsGroupSales = New ClsGroupSales
        cmbFM.DataSource = salesBFC.ListComboBox
        cmbFM.DisplayMember = "Name"
        cmbFM.ValueMember = "GroupSalesID"
    End Sub

    Sub ComboBoxSeaPort()
        Dim seaportBFC As ClsDestination = New ClsDestination
        Dim status As String = "S"
        cmbPort.DataSource = seaportBFC.ListComboBoxDestination(status)
        cmbPort.DisplayMember = "Name"
        cmbPort.ValueMember = "DestinationID"
    End Sub

    Sub ComboBoxUnit()
        Dim unitBFC As ClsUnit = New ClsUnit
        cmbUnit.DataSource = unitBFC.ListComboBox
        cmbUnit.DisplayMember = "UnitName"
        cmbUnit.ValueMember = "UnitID"
    End Sub

    Sub ComboBoxColor()
        Dim colorBFC As ClsColor = New ClsColor
        cmbColor.DataSource = colorBFC.ListComboBox
        cmbColor.DisplayMember = "ColorName"
        cmbColor.ValueMember = "ColorID"
    End Sub

    Sub ComboBoxCurrency()
        Dim currBFC As ClsCurrency = New ClsCurrency
        cmbCurr.DataSource = currBFC.ListComboBoxCurrency
        cmbCurr.DisplayMember = "CurrCode"
        cmbCurr.ValueMember = "CurrencyID"
    End Sub

    Function RetrieveBuyer() As Boolean
        Dim vendorModel As VendorModel = New VendorModel
        Dim vendorBFC As ClsVendor = New ClsVendor
        Try
            vendorModel = vendorBFC.RetrieveBuyerName(txtBuyer.Text)
            If String.IsNullOrEmpty(vendorModel.VendorName) Then
                MsgBoxError("Buyer name not valid")
                txtBuyer.Clear()
                Return False
            Else
                buyerID = vendorModel.VendorID
                txtBuyer.Text = vendorModel.VendorName
                Return True
            End If
        Catch ex As Exception
            Return False
            MsgBoxError(ex.Message)
        End Try
    End Function

    Function RetrieveCustomer() As Boolean
        Dim vendorModel As VendorModel = New VendorModel
        Dim vendorBFC As ClsVendor = New ClsVendor
        Try
            vendorModel = vendorBFC.RetrieveCustomerName(txtTo.Text)
            If String.IsNullOrEmpty(vendorModel.VendorName) Then
                MsgBoxError("Customer name not valid")
                txtTo.Clear()
                Return False
            Else
                customerID = vendorModel.VendorID

                txtTo.Text = vendorModel.VendorName
                txtAddress.Text = vendorModel.Address
                txtTlp.Text = vendorModel.Telephone
                txtFax.Text = vendorModel.Fax
                txtAttention.Text = vendorModel.ContactPerson
                Return True
            End If
        Catch ex As Exception
            Return False
            MsgBoxError(ex.Message)
        End Try
    End Function

    Function RetrieveFabric() As Boolean
        Dim fabricModel As FabricModel = New FabricModel
        Dim fabricBFC As ClsFabric = New ClsFabric
        Try
            fabricModel = fabricBFC.RetrieveByName(txtFabric.Text)
            If String.IsNullOrEmpty(fabricModel.FabricCode) Then
                MsgBoxError("Fabric name not valid")
                txtFabric.Clear()
                Return False
            Else
                fabricID = fabricModel.FabricID
                txtFabric.Text = fabricModel.FabricName
                Return True
            End If
        Catch ex As Exception
            Return False
            MsgBoxError(ex.Message)
        End Try
    End Function
    Function CheckEmpty() As Boolean
        If String.IsNullOrEmpty(txtBuyer.Text) Then
            MsgBoxWarning("Buyer can't empty")
            txtBuyer.Focus()
            Return False
        ElseIf String.IsNullOrEmpty(txtRefPO.Text) Then
            MsgBoxWarning("Ref PO can't empty")
            txtRefPO.Focus()
            Return False
        ElseIf String.IsNullOrEmpty(txtStyle.Text) Then
            MsgBoxWarning("Style can't empty")
            txtStyle.Focus()
            Return False
        ElseIf String.IsNullOrEmpty(txtContract.Text) Then
            MsgBoxWarning("Contract No can't empty")
            txtContract.Focus()
            Return False
        ElseIf String.IsNullOrEmpty(txtDelPlace.Text) Then
            MsgBoxWarning("Delivery Place can't empty")
            txtDelPlace.Focus()
            Return False
        ElseIf dgv.Rows.Count - 1 = 0 Then
            MsgBoxWarning("Detail can't empty")
            txtFabric.Focus()
            Return False
        Else
            Return True
        End If
    End Function
    Function CheckEmptyDetail() As Boolean
        If txtQtyCutt.Text = "" Or txtQtyCutt.Text = 0 Then
            MsgBoxWarning("Qty Cuttable can't empty or 0")
            txtQtyCutt.Focus()
            Return False
        ElseIf txtQtyWeight.Text = "" Or txtQtyWeight.Text = 0 Then
            MsgBoxWarning("Qty Weight can't empty or 0")
            txtQtyWeight.Focus()
            Return False
        ElseIf txtPrice.Text = "" Or txtPrice.Text = 0 Then
            MsgBoxWarning("Unit Price can't empty or 0")
            txtPrice.Focus()
            Return False
        ElseIf txtQty.Text = "" Or txtQty.Text = 0 Then
            MsgBoxWarning("Qty can't empty or 0")
            txtQty.Focus()
            Return False
        Else
            Return True
        End If
    End Function

    Function CheckDetail() As Boolean
        Dim cek As Integer
        Dim status As Boolean = True
        For cek = 0 To Me.dgv.Rows.Count - 1
            If Me.dgv.Rows(cek).Cells(0).Value = fabricID Then
                status = False
            End If
        Next
        Return status
    End Function

    Function GetPiHeaderID() As Long
        Dim piHeaderID As Long
        Dim piBFC As ClsProformaInvoice = New ClsProformaInvoice
        piHeaderID = piBFC.GeneratedAutoNumber
        Return piHeaderID
    End Function

    Function GetPINo() As String
        Dim piNo As String
        Dim piBFC As ClsProformaInvoice = New ClsProformaInvoice
        piNo = piBFC.GeneratedPINo(customerCode)
        Return piNo
    End Function

    Function SetHeaderModel() As PIHeaderModel
        Dim piHeaderModel As PIHeaderModel = New PIHeaderModel
        With piHeaderModel
            Select Case condition
                Case "Create"
                    .PIHeaderID = GetPiHeaderID()
                    .PIDate = Format(dtPIDate.Value, "yyyy-MM-dd")
                    .PINo = GetPINo()
                    txtPINo.Text = .PINo
                    .VendorID = customerID
                    .BuyerID = buyerID
                    .GroupSalesID = cmbFM.SelectedValue
                    .RefPO = txtRefPO.Text
                    .Style = txtStyle.Text
                    .SeasonID = cmbSeason.SelectedValue
                    .TermOfPaymentID = cmbTOP.SelectedValue
                    .DelTerm = Format(dtDelTerm.Value, "yyyy-MM-dd")
                    .TermOfPriceID = cmbTermPrice.SelectedValue
                    .ContractNo = txtContract.Text
                    .DestinationID = cmbPort.SelectedValue
                    .DeliveryPlace = txtDelPlace.Text
                    .Status = 1
                    .CreatedBy = userID
                    .CreatedDate = DateTime.Now
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                Case "Update"

            End Select
        End With
        Return piHeaderModel
    End Function

    Function SetDetailsModel(piHeaderID As Long) As List(Of PIDetailModel)
        Dim listPIDetailModel As List(Of PIDetailModel) = New List(Of PIDetailModel)
        For detail = 0 To dgv.Rows.Count - 2
            Dim piDetailModel As PIDetailModel = New PIDetailModel
            piDetailModel.PIHeaderID = piHeaderID
            piDetailModel.FabricID = dgv.Rows(detail).Cells(0).Value
            piDetailModel.DateDetail = dgv.Rows(detail).Cells(2).Value
            piDetailModel.ColorID = dgv.Rows(detail).Cells(3).Value
            piDetailModel.PPSample = dgv.Rows(detail).Cells(5).Value
            piDetailModel.QtyCuttable = dgv.Rows(detail).Cells(6).Value
            piDetailModel.QtyWeight = dgv.Rows(detail).Cells(7).Value
            piDetailModel.Qty = dgv.Rows(detail).Cells(13).Value
            piDetailModel.UnitID = dgv.Rows(detail).Cells(8).Value
            piDetailModel.UnitPrice = dgv.Rows(detail).Cells(12).Value
            piDetailModel.CurrencyID = dgv.Rows(detail).Cells(10).Value
            listPIDetailModel.Add(piDetailModel)
        Next
        Return listPIDetailModel
    End Function

    Sub InsertData()
        Dim piBFC As ClsProformaInvoice = New ClsProformaInvoice
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Create new Proforma Invoice,PINo is " + GetPINo()

        Try
            If piBFC.InsertData(SetHeaderModel, SetDetailsModel(GetPiHeaderID), logBFC.SetLogHistory(logDesc)) = True Then
                MsgBoxSaved()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub PreCreateDisplay()
        dgv.Columns.Clear()
        ClearHeader()
        ClearDetail()
        GridDetail()
        ComboBoxSeason()
        ComboBoxTOP()
        ComboBoxTermOfPrice()
        ComboBoxUnit()
        ComboBoxSeaPort()
        ComboBoxColor()
        ComboBoxCurrency()
        ComboBoxGroupSales()
        txtBuyer.Focus()
    End Sub
#End Region

#Region "Other Header"
    Private Sub txtBuyer_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtBuyer.KeyPress
        If e.KeyChar = Chr(13) Then
            If RetrieveBuyer() = True Then
                txtRefPO.Focus()
            End If
        End If
    End Sub

    Private Sub txtBuyer_Validated(sender As Object, e As EventArgs) Handles txtBuyer.Validated
        If txtBuyer.Text = "" Then
            txtBuyer.Text = ""
        Else
            If RetrieveBuyer() = False Then
                txtBuyer.Focus()
            End If
        End If
    End Sub

    Private Sub txtRefPO_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtRefPO.KeyPress
        If e.KeyChar = Chr(13) Then
            txtStyle.Focus()
        End If
    End Sub

    Private Sub txtStyle_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtStyle.KeyPress
        If e.KeyChar = Chr(13) Then
            cmbSeason.Focus()
        End If
    End Sub

    Private Sub cmbSeason_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbSeason.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbSeason_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbSeason.SelectedIndexChanged
        cmbTOP.Focus()
    End Sub

    Private Sub cmbTOP_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbTOP.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbTOP_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbTOP.SelectedIndexChanged
        dtDelTerm.Focus()
    End Sub

    Private Sub dtDelTerm_KeyPress(sender As Object, e As KeyPressEventArgs) Handles dtDelTerm.KeyPress
        If e.KeyChar = Chr(13) Then
            cmbTermPrice.Focus()
        End If
    End Sub

    Private Sub cmbTermPrice_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbTermPrice.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbTermPrice_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbTermPrice.SelectedIndexChanged
        txtContract.Focus()
    End Sub

    Private Sub txtContract_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtContract.KeyPress
        If e.KeyChar = Chr(13) Then
            cmbPort.Focus()
        End If
    End Sub

    Private Sub cmbPort_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbPort.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbPort_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbPort.SelectedIndexChanged
        txtTo.Focus()
    End Sub

    Private Sub txtTo_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtTo.KeyPress
        If e.KeyChar = Chr(13) Then
            If RetrieveCustomer() = True Then
                cmbFM.Focus()
            End If
        End If
    End Sub

    Private Sub txtTo_Validated(sender As Object, e As EventArgs) Handles txtTo.Validated
        If txtTo.Text = "" Then
            txtTo.Text = ""
        Else
            If RetrieveCustomer() = False Then
                txtTo.Focus()
            End If
        End If
    End Sub

    Private Sub cmbFM_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbFM.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbFM_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbFM.SelectedIndexChanged
        txtDelPlace.Focus()
    End Sub

    Private Sub txtDelPlace_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtDelPlace.KeyPress
        If e.KeyChar = Chr(13) Then
            txtFabric.Focus()
        End If
    End Sub

    Private Sub dgv_RowStateChanged(sender As Object, e As DataGridViewRowStateChangedEventArgs) Handles dgv.RowStateChanged
        intPos = e.Row.Index
    End Sub

    Private Sub FrmProformaInvoice_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Select Case condition
            Case "Create"
                PreCreateDisplay()
        End Select
    End Sub
#End Region

#Region "Other Detail"
    Private Sub txtFabric_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtFabric.KeyPress
        If e.KeyChar = Chr(13) Then
            If RetrieveFabric() = True Then
                dtDateDetail.Focus()
            End If
        End If
    End Sub

    Private Sub txtFabric_Validated(sender As Object, e As EventArgs) Handles txtFabric.Validated
        If txtFabric.Text = "" Then
            txtFabric.Text = ""
        Else
            If RetrieveFabric() = False Then
                txtFabric.Focus()
            End If
        End If
    End Sub

    Private Sub dtDateDetail_KeyPress(sender As Object, e As KeyPressEventArgs) Handles dtDateDetail.KeyPress
        If e.KeyChar = Chr(13) Then
            cmbColor.Focus()
        End If
    End Sub

    Private Sub cmbColor_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbColor.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbColor_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbColor.SelectedIndexChanged
        txtPPSample.Focus()
    End Sub

    Private Sub txtPPSample_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtPPSample.KeyPress
        If e.KeyChar = Chr(13) Then
            txtQtyCutt.Focus()
        End If
    End Sub

    Private Sub txtQtyCutt_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtQtyCutt.KeyPress
        If e.KeyChar = Chr(13) Then
            txtQtyWeight.Focus()
        End If
    End Sub

    Private Sub txtQtyCutt_TextChanged(sender As Object, e As EventArgs) Handles txtQtyCutt.TextChanged
        If txtQtyCutt.Text = "" Then
            txtQtyCutt.Text = ""
        Else
            If ValidationNumber(txtQtyCutt) = False Then
                txtQtyCutt.Clear()
                txtQtyCutt.Focus()
            End If
        End If
    End Sub

    Private Sub txtQtyWeight_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtQtyWeight.KeyPress
        If e.KeyChar = Chr(13) Then
            cmbUnit.Focus()
        End If
    End Sub

    Private Sub txtQtyWeight_TextChanged(sender As Object, e As EventArgs) Handles txtQtyWeight.TextChanged
        If txtQtyWeight.Text = "" Then
            txtQtyWeight.Text = ""
        Else
            If ValidationNumber(txtQtyWeight) = False Then
                txtQtyWeight.Clear()
                txtQtyWeight.Focus()
            End If
        End If
    End Sub


    Private Sub cmbUnit_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbUnit.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbUnit_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbUnit.SelectedIndexChanged
        cmbCurr.Focus()
    End Sub

    Private Sub cmbCurr_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCurr.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbCurr_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCurr.SelectedIndexChanged
        txtPrice.Focus()
    End Sub

    Private Sub txtPrice_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtPrice.KeyPress
        If e.KeyChar = Chr(13) Then
            txtQty.Focus()
        End If
    End Sub

    Private Sub txtPrice_TextChanged(sender As Object, e As EventArgs) Handles txtPrice.TextChanged
        If txtPrice.Text = "" Then
            txtPrice.Text = ""
        Else
            If ValidationNumber(txtPrice) = False Then
                txtPrice.Clear()
                txtPrice.Focus()
            End If
        End If
    End Sub

    Private Sub txtQty_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtQty.KeyPress
        If e.KeyChar = Chr(13) Then
            btnAdd.Focus()
        End If
    End Sub

    Private Sub txtQty_TextChanged(sender As Object, e As EventArgs) Handles txtQty.TextChanged
        If txtQty.Text = "" Then
            txtQty.Text = ""
        Else
            If ValidationNumber(txtQty) = False Then
                txtQty.Clear()
                txtQty.Focus()
            End If
        End If
    End Sub
#End Region

#Region "Button"
    Private Sub btnAdd_Click(sender As Object, e As EventArgs) Handles btnAdd.Click
        If CheckEmptyDetail() = True Then
            If CheckDetail() = True Then
                Try
                    AddGridDetail()
                    ClearDetail()
                    txtFabric.Focus()
                Catch ex As Exception
                    MsgBoxError(ex.Message)
                End Try
            Else
                MsgBox("'" & txtFabric.Text & "' available in list", MsgBoxStyle.Critical, "warning")
                ClearDetail()
                Me.txtFabric.Focus()
            End If
        End If
    End Sub

    Private Sub btnDel_Click(sender As Object, e As EventArgs) Handles btnDel.Click
        Dim S As Integer
        If String.IsNullOrEmpty(Me.dgv.Rows(S).Cells(0).Value) Then
            MsgBoxError("Data no available for deleted")
        Else
            Dim delete As String
            delete = MsgBoxQuestion()
            If delete = MsgBoxResult.Yes Then
                DeleteGridDetail()
            End If
        End If
    End Sub

    Private Sub btnSave_Click(sender As Object, e As EventArgs) Handles btnSave.Click
        If CheckEmpty() = True Then
            Select Case condition
                Case "Create"
                    InsertData()
            End Select
        End If
    End Sub

    Private Sub btnCancel_Click(sender As Object, e As EventArgs) Handles btnCancel.Click
        PreCreateDisplay()
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        Close()
    End Sub

    Private Sub btnCarBuy_Click(sender As Object, e As EventArgs) Handles btnCarBuy.Click
        Dim frm As New FrmListCustomer
        FrmListCustomer.condition = "Buyer"
        frm.ShowDialog()

        txtBuyer.Text = buyerName
    End Sub

    Private Sub btnCarCust_Click(sender As Object, e As EventArgs) Handles btnCarCust.Click
        Dim frm As New FrmListCustomer
        FrmListCustomer.condition = "customer"
        frm.ShowDialog()

        txtTo.Text = customerName
        txtAddress.Text = customerAddress
        txtTlp.Text = customerTlp
        txtFax.Text = customerFax
        txtAttention.Text = customerAtten
    End Sub

    Private Sub btnCarFab_Click(sender As Object, e As EventArgs) Handles btnCarFab.Click
        Dim frm As New FrmListFabric
        frm.ShowDialog()

        txtFabric.Text = fabricName
    End Sub
#End Region
End Class