Imports System.ComponentModel

Public Class FrmBPB

#Region "Declaration"
    Public condition As String
    Public Shared bpbheaderID As Long = 0
    Dim intBaris As Integer
    Dim intPost As Integer
    Dim supplierCode As String = ""
    Dim statusBPB As Int16
    Dim msgError As String = "Error BPB : "
#End Region

#Region "ComboBox"
    Public Sub ComboBoxPO()
        Dim poBFC As ClsPO = New ClsPO
        Try
            poBFC.ComboBoxPO(cmbPONo)
        Catch ex As Exception
            Throw ex
        Finally
            poBFC = Nothing
        End Try
    End Sub

    Sub ComboBoxPI()
        Dim poBFC As ClsPO = New ClsPO

        Try
            poBFC.ComboBoxPI(cmbPINO)
        Catch ex As Exception
            Throw ex
        Finally
            poBFC = Nothing
        End Try


    End Sub
    Sub RetrieveSupplier()
        Dim poBFC As ClsPO = New ClsPO
        Dim poModel As POHeaderModel = New POHeaderModel
        Dim obj As Integer = cmbPONo.SelectedValue
        If obj > 0 Then
            poModel = poBFC.RetrieveByID(obj)
            With poModel
                txtSupplier.Text = .SupplierName

            End With
        Else
            MsgBoxError("PO not valid")
        End If
    End Sub
    Sub Retrievedetail()
        Dim poBFC As ClsPO = New ClsPO
        Dim dataAccess As ClsDataAccess = New ClsDataAccess
        Dim detailModel As PODetailModel = New PODetailModel
        Dim obj As Integer = cmbPONo.SelectedValue
        If obj > 0 Then
            detailModel = poBFC.RetrieveByDetailRaw(obj)
            With detailModel
                '   While dataAccess.reader.Read
                cmbRawCode.Text = .RawMaterialName

                ' cmbRawCode.ValueMember = "RawMaterialID"
                ' cmbRawCode.DisplayMember = "RawMaterialName"
                ' txtUnitname.Text = .UnitName
                ' txtQtyPO.Text = .Quantity
                '  End While
            End With
        Else
            MsgBoxError("PO not valid")
        End If
    End Sub
#End Region

#Region "Grid Detail"
    Sub GridDetail()
        Try
            With dgv

                ' Columns.Add(0, "BPB Header ID")
                ' .Columns(0).Width = 200
                ' .Columns(0).Visible = False

                .Columns.Add(0, "PO HeaderID")
                .Columns(0).Width = 150
                .Columns(0).Visible = False

                .Columns.Add(1, "PO No")
                .Columns(1).ReadOnly = True

                .Columns.Add(2, "PI HeaderID")
                .Columns(2).Width = 150
                .Columns(2).Visible = False

                .Columns.Add(3, "PI.NO")
                .Columns(3).ReadOnly = True

                .Columns.Add(4, "Raw Material ID")
                .Columns(4).Visible = False

                .Columns.Add(5, "Raw Material Name")
                .Columns(5).ReadOnly = True

                .Columns.Add(6, "Quantity PO")
                .Columns(6).ReadOnly = True

                .Columns.Add(7, "Received")

                .Columns.Add(8, "Quantity Packaging")

                .Columns.Add(9, " UnitID")
                .Columns(9).Visible = False

                .Columns.Add(10, " Unit Name")
                .Columns(10).ReadOnly = True


                .Columns.Add(11, "Outstanding")
                .Columns(11).ReadOnly = True
            End With
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

#Region "Clear Data"
    Sub ClearAll()
        txtBPBNo.Text = AutoGenerated
        ' cmbPONo.Text = ""
        ' txtSupplier.Clear()
        ' txtDocNo.Clear()
        ' txtDocType.Clear()
        'txtDONO.Focus()
        dgv.Columns.Clear()

        intBaris = 0
        intPost = 0
    End Sub
#End Region

#Region "Check Empty"
    Function CheckEmptyHeader() As Boolean
        Dim check As Boolean = True
        If cmbPONo.SelectedValue = 0 Then
            MsgBoxWarning("PINo not valid")
            cmbPONo.Focus()

        ElseIf Trim(txtSupplier.Text) = "" Then
            MsgBoxWarning("Supplier can't empty,please check your purchase order")
            txtSupplier.Focus()
        ElseIf Trim(txtDoNo.Text) = "" Then
            MsgBoxWarning("Do.Type can't empty")
            txtDONO.Focus()
        ElseIf Trim(txtDocType.Text) = "" Then
            MsgBoxWarning("Doc.Type Customs can't empty")
            txtDocType.Focus()
        ElseIf Trim(txtDocNo.Text) = "" Then
            MsgBoxWarning("Doc.No Customs can't empty")
            txtDocNo.Focus()
        Else
            check = False
        End If
        Return check
    End Function
    Function CheckEmptyDetail() As Boolean
        Dim check As Boolean = True
        For i As Integer = 0 To dgv.Rows.Count - 2
            If dgv.Rows(i).Cells(0).Value = "" Then
                MsgBoxError("Transaction not yet completed")
                Exit For
            ElseIf dgv.Rows(i).Cells(9).Value = 0 Then
                MsgBoxError("Receveid can't 0")
                Exit For

            Else
                check = False
            End If
        Next
        Return check
    End Function
#End Region

#Region "Set Data"
    Function SetDataHeader(bpbID As Long, bpbCode As String) As BPBHeaderModel
        Dim headerModel As BPBHeaderModel = New BPBHeaderModel
        Dim bpbBFC As ClsBPB = New ClsBPB
        Try
            With headerModel
                Select Case condition
                    Case "Create"
                        .BPBHeaderID = bpbBFC.GetBPBHeaderID
                        .POHeaderID = cmbPONo.SelectedValue
                        .BPBNo = bpbBFC.GetBPBNo(supplierCode)
                        .BPBDate = Format(dtBPBDate.Value, "yyyy-MM-dd")
                        .InfactDate = Format(dtInFactory.Value, "yyyy-MM-dd")
                        txtDONO.Text = .DONo
                        txtDocType.Text = .DocTypeCustoms
                        txtDocNo.Text = .DocNoCustoms
                        .DocRegistrationDate = Format(dtDocDate.Value, "yyyy-MM-dd")
                        .Status = statusBPB
                        .CreatedBy = userID
                        .CreatedDate = DateTime.Now
                        .UpdatedBy = userID
                        .UpdatedDate = DateTime.Now
                    Case "Update"
                        .BPBHeaderID = bpbheaderID
                        .POHeaderID = cmbPONo.SelectedValue
                        txtBPBNo.Text = .BPBNo
                        .BPBDate = Format(dtBPBDate.Value, "yyyy-MM-dd")
                        .InfactDate = Format(dtInFactory.Value, "yyyy-MM-dd")
                        txtDONO.Text = .DONo
                        txtDocType.Text = .DocTypeCustoms
                        txtDocNo.Text = .DocNoCustoms
                        .DocRegistrationDate = Format(dtDocDate.Value, "yyyy-MM-dd")
                        .Status = statusBPB
                        .UpdatedBy = userID
                        .UpdatedDate = DateTime.Now
                End Select
            End With
            Return headerModel
        Catch ex As Exception
            Throw ex
        Finally
            bpbBFC = Nothing
        End Try
    End Function

    Function SetDetail(bpbID As Long) As List(Of BPBDetailModel)
        Dim bpbBFC As ClsBPB = New ClsBPB
        Dim listModel As List(Of BPBDetailModel) = New List(Of BPBDetailModel)
        Try
            listModel = bpbBFC.SetDetailRawMatrial(bpbheaderID, dgv)
            bpbBFC = Nothing
            Return listModel
        Catch ex As Exception
            bpbBFC = Nothing
            Throw ex
        End Try
    End Function
#End Region

#Region "Function"
    Sub CheckPermission()
        Dim roleBFC As ClsPermission = New ClsPermission
        Dim roleModel As RoleDModel = New RoleDModel
        Try
            roleModel = roleBFC.RetrieveDetailsByRoleIDMenuID(roleIDUser, Tag)
            If roleModel.IsCreate = True Then btnSave.Enabled = True
            If roleModel.IsUpdate = True Then btnUpdate.Enabled = True
            If roleModel.IsApprove = True Then btnApprove.Enabled = True
            If roleModel.IsVoid = True Then btnVoid.Enabled = True
        Catch ex As Exception
            Throw ex
        Finally
            roleBFC = Nothing
            roleModel = Nothing
        End Try
    End Sub

    Sub InsertData()
        Dim bpbBFC As ClsBPB = New ClsBPB
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim bpbCode As String = bpbBFC.GetBPBNo(supplierCode)
        Dim bpbID As Long = bpbBFC.GetBPBHeaderID
        Dim logDesc As String = "Create new BPB,BPB Order is " + bpbCode

        Try
            If bpbBFC.InsertData(SetDataHeader(bpbID, bpbCode), SetDetail(bpbID), logBFC.SetLogHistoryTrans(logDesc)) = True Then
                MsgBoxSaved()
                CheckPermission()
                btnPrint.Enabled = True
                btnSave.Enabled = False
                btnUpdate.Enabled = False
                'PreCreatedisplay()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub

    Sub UpdateData()
        Dim bpbBFC As ClsBPB = New ClsBPB
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update BPB,Where BPB Order Code = " + txtBPBNo.Text
        Try
            If bpbBFC.UpdateData(SetDataHeader(bpbheaderID, txtBPBNo.Text), SetDetail(bpbheaderID), logBFC.SetLogHistoryTrans(logDesc)) = True Then
                MsgBoxUpdated()
                CheckPermission()
                btnPrint.Enabled = True
                btnSave.Enabled = False
                btnUpdate.Enabled = False
            End If
            bpbBFC = Nothing
            logBFC = Nothing
        Catch ex As Exception
            bpbBFC = Nothing
            logBFC = Nothing
            Throw ex
        End Try
    End Sub
    Sub PreparePOByPOHeaderID()
        Dim poModel As POHeaderModel = New POHeaderModel
        Dim listDetail As List(Of PODetailModel) = New List(Of PODetailModel)
        Dim poBFC As ClsPO = New ClsPO
        Dim poID As Long = cmbPONo.SelectedValue
        Try
            If poID = 0 Then
                ClearAll()
                GridDetail()
                Throw New Exception("No data available")
            End If

            ClearAll()
            poModel = poBFC.RetrieveByID(poID)
            With poModel
                txtSupplier.Text = poModel.SupplierName

            End With

            GridDetail()
            listDetail = poBFC.RetrieveRawMaterialByHeaderID(poID)
            For Each detail In listDetail
                With dgv
                    .Rows.Add()
                    .Item(0, intBaris).Value = detail.POHeaderID
                    .Item(1, intBaris).Value = detail.PONo
                    .Item(2, intBaris).Value = detail.PIHeaderID
                    .Item(3, intBaris).Value = detail.PINo
                    .Item(4, intBaris).Value = detail.RawMaterialID
                    .Item(5, intBaris).Value = detail.RawMaterialName
                    .Item(6, intBaris).Value = detail.Quantity
                    .Item(7, intBaris).Value = 0
                    .Item(8, intBaris).Value = 0
                    .Item(9, intBaris).Value = detail.UnitID
                    .Item(10, intBaris).Value = detail.UnitName
                    .Item(11, intBaris).Value = 0

                End With
                intBaris = intBaris + 1
            Next

            listDetail = Nothing
            poBFC = Nothing
        Catch ex As Exception
            listDetail = Nothing
            poBFC = Nothing
            Throw ex
        End Try
    End Sub

    Sub SumOutstanding()
        Dim subTotal As Double
        subTotal = 0
        Try
            For i As Integer = 0 To dgv.Rows.Count - 2
                If Not IsNumeric(dgv.Rows(i).Cells(9).Value) Then
                    dgv.Rows(i).Cells(9).Value = 1

                    MsgBoxError("Error  : Test")

                Else
                    dgv.Rows(i).Cells(10).Value = Val(dgv.Rows(i).Cells(8).Value) - Val(dgv.Rows(i).Cells(9).Value)
                    '  dgv.Rows(i).Cells(10).Value = dgv.Rows(i).Cells(8).Value - dgv.Rows(i).Cells(9).Value
                End If
            Next

        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub PreCreateDisplay()
        Try
            ClearAll()
            GridDetail()
            ComboBoxPO()
            ComboBoxPI()
            CheckPermission()
            btnUpdate.Enabled = False
            btnApprove.Enabled = False
            btnVoid.Enabled = False
            btnPrint.Enabled = False
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Private Sub btnRawAddList_Click(sender As Object, e As EventArgs) Handles btnRawAddList.Click
        Try
            PreparePOByPOHeaderID()
        Catch ex As Exception
            MsgBoxError("Error  : " + ex.Message)
        End Try
    End Sub

    Private Sub dgv_RowStateChanged(sender As Object, e As DataGridViewRowStateChangedEventArgs)
        intPost = e.Row.Index
    End Sub


#End Region

#Region "Other"
    Private Sub cmbPONo_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbPONo.SelectedIndexChanged
        Try
            RetrieveSupplier()
            Retrievedetail()
        Catch ex As Exception

        End Try
    End Sub

    Private Sub cmbPINO_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbPINO.SelectedIndexChanged
        Try

            Retrievedetail()
        Catch ex As Exception

        End Try
    End Sub

    Private Sub dgv_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles dgv.CellEndEdit
        If e.ColumnIndex = 9 Then
            Try

                SumOutstanding()

            Catch ex As Exception
                '  MsgBoxError(msgError + "please delete column")
            End Try
        End If
    End Sub



    Private Sub FrmBPB_Load(sender As Object, e As EventArgs) Handles Me.Load
        Try
            Select Case condition
                Case "Create"
                    PreCreateDisplay()
                Case "Update"
                    ' PreUpdateDisplay()
            End Select
        Catch ex As Exception
            MsgBoxError("Error : " + ex.Message)
        End Try
    End Sub

    Private Sub dgv_KeyPress(sender As Object, e As KeyPressEventArgs) Handles dgv.KeyPress
        If e.KeyChar = Chr(27) Then 'ESC
            dgv.Rows.Remove(dgv.CurrentRow)
            SumOutstanding()
        End If
    End Sub

    Private Sub btnSave_Click(sender As Object, e As EventArgs) Handles btnSave.Click
        If CheckEmptyHeader() = False And CheckEmptyDetail() = False Then
            If condition = "Create" Then
                InsertData()
            End If
        End If
    End Sub


#End Region



End Class

