Public Class FrmBillOfMaterial
#Region "Declaration"
    Public conditionBOM As String
    Public Shared bomHeaderID As Long = 0
    Dim intBaris As Integer
    Dim intPost As Integer
    Dim buyerCode As String = ""
    Dim statusBOM As Int16
#End Region

#Region "ComboBox"
    Sub ComboBoxBuyer()
        Dim vendorBFC As ClsVendor = New ClsVendor
        Dim status As String = "C"
        Try
            vendorBFC.ComboBoxVendor(cmbBuyer, status)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub ComboBoxFabric()
        Dim fabricBFC As ClsFabric = New ClsFabric
        Try
            fabricBFC.ComboBoxFabric(cmbFabric)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub ComboBoxStyle()
        Dim styleBFC As ClsStyle = New ClsStyle
        Try
            styleBFC.ComboBoxStyle(cmbStyle)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub ComboBoxColor()
        Dim colorBFC As ClsColor = New ClsColor
        Try
            colorBFC.ComboBoxColor(cmbColor)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub ComboBoxRawMaterial()
        Dim rawBFC As ClsRawMaterial = New ClsRawMaterial
        Try
            rawBFC.ComboBoxRawMaterial(cmbRaw)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub ComboBoxUnit()
        Dim unitBFC As ClsUnit = New ClsUnit
        Try
            unitBFC.ComboBoxUnit(cmbUnit)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub ComboBoxAll()
        Try
            ComboBoxBuyer()
            ComboBoxFabric()
            ComboBoxStyle()
            ComboBoxColor()
            ComboBoxRawMaterial()
            ComboBoxUnit()
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

#Region "Grid Detail"
    Sub GridDetailRaw()
        Try
            With dgv
                .Columns.Add(0, "RawMaterialID")
                .Columns(0).Visible = False

                .Columns.Add(1, "Raw Material Name")
                .Columns.Add(2, "Specification")
                .Columns.Add(3, "Supplier")

                .Columns.Add(4, "UnitID")
                .Columns(4).Visible = False

                .Columns.Add(5, "UnitName")
                .Columns.Add(6, "Qty")
            End With
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

#Region "Clear Data"
    Sub ClearHeader()
        txtCode.Text = AutoGenerated
        txtCompo.Clear()
        txtSpec.Clear()
        intBaris = 0
        intPost = 0
    End Sub
    Sub ClearDetail()
        txtSpecRaw.Clear()
        txtSuppRaw.Clear()
        txtQty.Text = 0
    End Sub
    Sub ClearDataAll()
        ClearHeader()
        ClearDetail()
    End Sub
#End Region

#Region "Validation Number"
    Private Sub txtQty_TextChanged(sender As Object, e As EventArgs) Handles txtQty.TextChanged
        Try
            CheckNumber(txtQty)
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
#End Region

#Region "Add Grid Detail"
    Sub AddGridDetail()
        Try
            With dgv
                .Rows.Add()
                .Item(0, intBaris).Value = cmbRaw.SelectedValue
                .Item(1, intBaris).Value = cmbRaw.Text
                .Item(2, intBaris).Value = txtSpecRaw.Text
                .Item(3, intBaris).Value = txtSuppRaw.Text
                .Item(4, intBaris).Value = cmbUnit.SelectedValue
                .Item(5, intBaris).Value = cmbUnit.Text
                .Item(6, intBaris).Value = txtQty.Text
            End With
            intBaris = intBaris + 1
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

#Region "Delete Grid"
    Sub DeleteGridDetail()
        Try
            DeleteGrid(dgv, intBaris)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

#Region "Check Empty"
    Function CheckEmptyHeader() As Boolean
        Dim check As Boolean = True
        If cmbFabric.SelectedValue = 0 Then
            MsgBoxWarning("Fabric not valid")
            cmbFabric.Focus()
        ElseIf cmbBuyer.SelectedValue = 0 Then
            MsgBoxWarning("Buyer not valid")
            cmbBuyer.Focus()
        ElseIf cmbStyle.SelectedValue = 0 Then
            MsgBoxWarning("Style not valid")
            cmbStyle.Focus()
        ElseIf cmbColor.SelectedValue = 0 Then
            MsgBoxWarning("Color not valid")
            cmbColor.Focus()
        ElseIf cmbStatus.Text = "" Then
            MsgBoxWarning("Status can't empty")
            cmbStatus.Focus()
        Else
            check = False
        End If
        Return check
    End Function
#End Region

#Region "Check Available In List"
    Function CheckDetailInList() As Boolean
        Dim bomBFC As ClsBOM = New ClsBOM
        Dim status As Boolean
        Try
            status = bomBFC.CheckDetailInList(dgv, cmbRaw.SelectedValue)
            Return status
        Catch ex As Exception
            Throw ex
        Finally
            bomBFC = Nothing
        End Try
    End Function
#End Region

#Region "Set Data"
    Function SetDataHeader() As BOMHeaderModel
        Dim headerModel As BOMHeaderModel = New BOMHeaderModel
        Dim bomBFC As ClsBOM = New ClsBOM

        Dim status As Int16
        If cmbStatus.Text = "Production" Then
            status = 1
        ElseIf cmbStatus.Text = "Development" Then
            status = 2
        Else
            status = 0
        End If

        With headerModel
            Select Case conditionBOM
                Case "Create"
                    .BOMHeaderID = bomBFC.GetBOMHeaderID
                    .BOMCode = bomBFC.GetBOMCode(buyerCode)
                    .FabricID = cmbFabric.SelectedValue
                    .BuyerID = cmbBuyer.SelectedValue
                    .StyleID = cmbStyle.SelectedValue
                    .ColorID = cmbColor.SelectedValue
                    .StatusBOM = status
                    .IsActive = 1
                    .CreatedBy = userID
                    .CreatedDate = DateTime.Now
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                Case "Update"
                    .BOMHeaderID = bomHeaderID
                    .BOMCode = txtCode.Text
                    .FabricID = cmbFabric.SelectedValue
                    .BuyerID = cmbBuyer.SelectedValue
                    .StyleID = cmbStyle.SelectedValue
                    .ColorID = cmbColor.SelectedValue
                    .StatusBOM = status
                    .IsActive = 1
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
            End Select
        End With
        Return headerModel
    End Function

    Function SetDetail(bomID As Long) As List(Of BOMDetailModel)
        Dim bomBFC As ClsBOM = New ClsBOM
        Dim listModel As List(Of BOMDetailModel) = New List(Of BOMDetailModel)
        Try
            listModel = bomBFC.SetDetail(bomID, dgv)
            Return listModel
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "Function"
    Sub PrepareByHeaderID()
        Dim headerModel As BOMHeaderModel = New BOMHeaderModel
        Dim bomBFC As ClsBOM = New ClsBOM
        headerModel = bomBFC.RetrieveByID(bomHeaderID)
        With headerModel
            txtCode.Text = .BOMCode
            cmbFabric.SelectedValue = .FabricID
            txtCompo.Text = .Composition
            txtSpec.Text = .Specification
            cmbBuyer.SelectedValue = .BuyerID
            cmbStyle.SelectedValue = .StyleID
            cmbColor.SelectedValue = .ColorID
            If .StatusBOM = 1 Then
                cmbStatus.Text = "Production"
            ElseIf .StatusBOM = 2 Then
                cmbStatus.Text = "Development"
            Else
                cmbStatus.Text = ""
            End If
        End With
    End Sub
    Sub PrepareDetailByHeaderID()
        Try
            GridDetailRaw()
            Dim listDetail As List(Of BOMDetailModel) = New List(Of BOMDetailModel)
            Dim bomBFC As ClsBOM = New ClsBOM
            listDetail = bomBFC.RetrieveDetailByHeaderID(bomHeaderID)
            For Each detail In listDetail
                With dgv
                    .Rows.Add()
                    .Item(0, intBaris).Value = detail.RawMaterialID
                    .Item(1, intBaris).Value = detail.RawMaterialName
                    .Item(2, intBaris).Value = detail.Specification
                    .Item(3, intBarisFabric).Value = detail.StyleID
                    .Item(4, intBarisFabric).Value = detail.StyleName
                    .Item(5, intBarisFabric).Value = detail.RawMaterialID
                    .Item(6, intBarisFabric).Value = detail.RawMaterialName
                    .Item(7, intBarisFabric).Value = detail.TypeGreige
                    .Item(8, intBarisFabric).Value = detail.WidthMin
                    .Item(9, intBarisFabric).Value = detail.WidthMax
                    .Item(10, intBarisFabric).Value = detail.UnitID
                    .Item(11, intBarisFabric).Value = detail.UnitName
                    .Item(12, intBarisFabric).Value = detail.WeightMin
                    .Item(13, intBarisFabric).Value = detail.WeightMax
                    .Item(14, intBarisFabric).Value = detail.DNYardage
                    .Item(15, intBarisFabric).Value = detail.WeightYard
                    .Item(16, intBarisFabric).Value = detail.BeforeWash
                    .Item(17, intBarisFabric).Value = detail.AfterWash
                    .Item(18, intBarisFabric).Value = detail.NetWeight
                    .Item(19, intBarisFabric).Value = detail.SrinkageL
                    .Item(20, intBarisFabric).Value = detail.SrinkageW
                    .Item(21, intBarisFabric).Value = detail.GSM
                    .Item(22, intBarisFabric).Value = detail.PriceGreige
                    .Item(23, intBarisFabric).Value = detail.PurchSize
                    .Item(24, intBarisFabric).Value = detail.StorageSize
                    .Item(25, intBarisFabric).Value = detail.PPSample
                    .Item(26, intBarisFabric).Value = detail.QtyCuttable
                    .Item(27, intBarisFabric).Value = detail.QtyWeight
                End With
                intBarisFabric = intBarisFabric + 1
            Next
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
    Sub PreCreateDisplay()
        ClearDataAll()
        dgv.Columns.Clear()
        GridDetailRaw()
    End Sub
    Sub CheckPermissions()
        Try
            Dim roleBFC As ClsPermission = New ClsPermission
            Dim roleModel As RoleDModel = New RoleDModel
            roleModel = roleBFC.RetrieveDetailsByRoleIDMenuID(roleIDUser, Tag)
            If roleModel.IsCreate = True Then btnSave.Enabled = True
            If roleModel.IsUpdate = True Then btnUpdate.Enabled = True
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Sub InsertData()
        Dim bomBFC As ClsBOM = New ClsBOM
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim myBomCode As String = bomBFC.GetBOMCode(buyerCode)
        Dim myBomID As Long = bomBFC.GetBOMHeaderID
        Dim logDesc As String = "Create new Bill Of Material,BOM Code is " + myBomCode

        Try
            If bomBFC.InsertData(SetDataHeader, SetDetail(myBomID), logBFC.SetLogHistoryTrans(logDesc)) = True Then
                MsgBoxSaved()
                CheckPermissions()
                PreCreatedisplay()
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Sub UpdateData()
        Dim bomBFC As ClsBOM = New ClsBOM
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Bill Of Material,Where BOM Code = " + txtCode.Text
        Try
            If bomBFC.UpdateData(SetDataHeader, SetDetail(bomHeaderID), logBFC.SetLogHistoryTrans(logDesc)) = True Then
                MsgBoxUpdated()
                CheckPermissions()
                btnSave.Enabled = False
                btnUpdate.Enabled = False
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
#End Region

#Region "Button"

#End Region

#Region "KeyPress"

#End Region

#Region "Row State Change"

#End Region
End Class