Public Class FrmSettingBank
    Dim isCreate As Boolean = False
    Dim isUpdate As Boolean = False
    Dim isDelete As Boolean = False
    Sub CheckPermissions()
        Dim roleBFC As ClsPermission = New ClsPermission
        Dim roleModel As RoleDModel = New RoleDModel
        roleModel = roleBFC.RetrieveDetailsByRoleIDMenuID(roleIDUser, Tag)
        If roleModel.IsCreate = True Then isCreate = True
        If roleModel.IsUpdate = True Then isUpdate = True
        If roleModel.IsDelete = True Then isDelete = True
    End Sub
#Region "Declaration Bank"
    Dim bankID As Integer = 0
    Dim displayBank As String = ""
#End Region

#Region "Declaration Curr"
    Dim currID As Integer = 0
    Dim displayCurr As String = ""
#End Region

#Region "Function Bank"
    Sub ClearTextBank()
        txtBankCode.Text = AutoGenerated
        txtBankName.Clear()
        txtAccountNo.Clear()
        txtAccountName.Clear()
        txtSwiftCode.Clear()
        cmbCariBank.Text = ""
        txtCariBank.Clear()
    End Sub
    Sub PropertiesGridBank()
        dgvBank.Columns(0).Visible = False
        dgvBank.Columns(1).HeaderText = "Bank Code"
        dgvBank.Columns(1).Width = 100
        dgvBank.Columns(2).HeaderText = "Name"
        dgvBank.Columns(2).Width = 150
        dgvBank.Columns(3).HeaderText = "Account"
        dgvBank.Columns(3).Width = 200
        dgvBank.Columns(4).HeaderText = "Account Name"
        dgvBank.Columns(4).Width = 250
        dgvBank.Columns(5).HeaderText = "Swift Code"
        dgvBank.Columns(5).Width = 200
        dgvBank.Columns(6).Visible = False
        dgvBank.Columns(7).Visible = False
        dgvBank.Columns(8).Visible = False
        dgvBank.Columns(9).Visible = False
        dgvBank.Columns(10).Visible = False
    End Sub
    Sub ListBank(myOption As String, myParam As String)
        Try
            Dim bankBFC As ClsBank = New ClsBank
            dgvBank.DataSource = bankBFC.RetrieveList(myOption, myParam)
            dgvBank.ReadOnly = True
            PropertiesGridBank()
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub EnabledTextBank(status As Boolean)
        txtBankName.Enabled = status
        txtAccountNo.Enabled = status
        txtAccountName.Enabled = status
        txtSwiftCode.Enabled = status
    End Sub
    Sub ButtonAdd()
        If isCreate = True Then btnAddBank.Enabled = True
        btnSaveBank.Enabled = False
        btnDeleteBank.Enabled = False
        btnCancelBank.Enabled = False
    End Sub
    Sub ButtonSave()
        btnAddBank.Enabled = False
        btnSaveBank.Enabled = True
        btnDeleteBank.Enabled = False
        btnCancelBank.Enabled = True
    End Sub
    Sub ButtonUpdate()
        btnAddBank.Enabled = False
        If isUpdate = True Then btnSaveBank.Enabled = True
        If isDelete = True Then btnDeleteBank.Enabled = True
        btnCancelBank.Enabled = True
    End Sub

    Sub PreCreateDisplayBank()
        ClearTextBank()
        ListBank(cmbCariBank.Text, txtCariBank.Text)
        EnabledTextBank(False)
        ButtonAdd()
        displayBank = ""
    End Sub
    Function CheckEmptyBank() As Boolean
        If txtBankName.Text = String.Empty Then
            MsgBoxWarning("Name can't empty")
            txtBankName.Focus()
            Return True
        ElseIf txtAccountNo.Text = String.Empty Then
            MsgBoxWarning("Account can't empty")
            txtAccountNo.Focus()
            Return True
        ElseIf txtAccountName.Text = String.Empty Then
            MsgBoxWarning("Account name can't empty")
            txtAccountName.Focus()
            Return True
        ElseIf txtSwiftCode.Text = String.Empty Then
            MsgBoxWarning("Swift Code can't empty")
            txtSwiftCode.Focus()
            Return True
        Else
            Return False
        End If
    End Function
    Function SetBankModel() As BankModel
        Dim bankModel As BankModel = New BankModel
        Dim bankBFC As ClsBank = New ClsBank
        Select Case displayBank
            Case "Create"
                bankModel.BankID = bankBFC.GeneratedAutoNumber
                bankModel.BankCode = bankBFC.GeneratedCode
                bankModel.Name = txtBankName.Text
                bankModel.Account = txtAccountNo.Text
                bankModel.AccountName = txtAccountName.Text
                bankModel.SwiftCode = txtSwiftCode.Text
                bankModel.IsActive = True
                bankModel.CreatedBy = userID
                bankModel.CreatedDate = DateTime.Now
                bankModel.UpdatedBy = userID
                bankModel.UpdatedDate = DateTime.Now
            Case "Update"
                bankModel.BankID = bankID
                bankModel.Name = txtBankName.Text
                bankModel.Account = txtAccountNo.Text
                bankModel.AccountName = txtAccountName.Text
                bankModel.SwiftCode = txtSwiftCode.Text
                bankModel.IsActive = True
                bankModel.UpdatedBy = userID
                bankModel.UpdatedDate = DateTime.Now
            Case Else
                bankModel.BankID = bankID
                bankModel.IsActive = False
                bankModel.UpdatedBy = userID
                bankModel.UpdatedDate = DateTime.Now
        End Select
        Return bankModel
    End Function
    Sub InsertBank()
        Dim bankBFC As ClsBank = New ClsBank
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Create new Bank,bank name is " + txtBankName.Text
        Try
            If bankBFC.InsertBank(SetBankModel, logBFC.SetLogHistory(logDesc)) = True Then
                MsgBoxSaved()
                PreCreateDisplayBank()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub UpdateBank()
        Dim bankBFC As ClsBank = New ClsBank
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Bank for BankCode = " + txtBankCode.Text
        Try
            If bankBFC.UpdateBank(SetBankModel, logBFC.SetLogHistory(logDesc), displayBank) = True Then
                MsgBoxUpdated()
                PreCreateDisplayBank()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub DeleteBank()
        Dim bankBFC As ClsBank = New ClsBank
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Bank for BankCode = " + txtBankCode.Text + ",update IsActive = False"
        displayBank = "Delete"
        Try
            If bankBFC.UpdateBank(SetBankModel, logBFC.SetLogHistory(logDesc), displayBank) = True Then
                MsgBoxDeleted()
                PreCreateDisplayBank()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
#End Region

#Region "Function Curr"
    Sub ClearTextCurr()
        txtCurrCode.Text = AutoGenerated
        txtCurrName.Clear()
        cmbCariBank.Text = ""
        txtCariBank.Clear()
    End Sub
    Sub PropertiesGridCurr()
        dgvCurr.Columns(0).Visible = False
        dgvCurr.Columns(1).HeaderText = "Currency Code"
        dgvCurr.Columns(1).Width = 100
        dgvCurr.Columns(2).HeaderText = "Name"
        dgvCurr.Columns(2).Width = 150
        dgvCurr.Columns(3).Visible = False
        dgvCurr.Columns(4).Visible = False
        dgvCurr.Columns(5).Visible = False
        dgvCurr.Columns(6).Visible = False
        dgvCurr.Columns(7).Visible = False
    End Sub
    Sub ListCurr(myOption As String, myParam As String)
        Try
            Dim currBFC As ClsCurrency = New ClsCurrency
            dgvCurr.DataSource = currBFC.RetrieveList(myOption, myParam)
            dgvCurr.ReadOnly = True
            PropertiesGridCurr()
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub EnabledTextCurr(status As Boolean)
        txtCurrName.Enabled = status
    End Sub
    Sub ButtonAddCurr()
        If isCreate = True Then btnAddCurr.Enabled = True
        btnSaveCurr.Enabled = False
        btnDeleteCurr.Enabled = False
        btnCancelCurr.Enabled = False
    End Sub
    Sub ButtonSaveCurr()
        btnAddCurr.Enabled = False
        btnSaveCurr.Enabled = True
        btnDeleteCurr.Enabled = False
        btnCancelCurr.Enabled = True
    End Sub
    Sub ButtonUpdateCurr()
        btnAddCurr.Enabled = False
        If isUpdate = True Then btnSaveCurr.Enabled = True
        If isDelete = True Then btnDeleteCurr.Enabled = True
        btnCancelCurr.Enabled = True
    End Sub

    Sub PreCreateDisplayCurr()
        ClearTextCurr()
        ListCurr(cmbCariCurr.Text, txtCariCurr.Text)
        EnabledTextCurr(False)
        ButtonAddCurr()
        displayCurr = ""
    End Sub
    Function CheckEmptyCurr() As Boolean
        If txtCurrName.Text = String.Empty Then
            MsgBoxWarning("Name can't empty")
            txtCurrName.Focus()
            Return True
        Else
            Return False
        End If
    End Function
    Function SetCurrModel() As CurrencyModel
        Dim currModel As CurrencyModel = New CurrencyModel
        Dim currBFC As ClsCurrency = New ClsCurrency
        Select Case displayCurr
            Case "Create"
                currModel.CurrencyID = currBFC.GeneratedAutoNumber
                currModel.CurrencyCode = currBFC.GeneratedCode
                currModel.CurrencyName = txtCurrName.Text
                currModel.IsActive = True
                currModel.CreatedBy = userID
                currModel.CreatedDate = DateTime.Now
                currModel.UpdatedBy = userID
                currModel.UpdatedDate = DateTime.Now
            Case "Update"
                currModel.CurrencyID = currID
                currModel.CurrencyName = txtCurrName.Text
                currModel.IsActive = True
                currModel.UpdatedBy = userID
                currModel.UpdatedDate = DateTime.Now
            Case Else
                currModel.CurrencyID = currID
                currModel.IsActive = False
                currModel.UpdatedBy = userID
                currModel.UpdatedDate = DateTime.Now
        End Select
        Return currModel
    End Function
    Sub InsertCurr()
        Dim currBFC As ClsCurrency = New ClsCurrency
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Create new Currency,Currency name is " + txtCurrName.Text
        Try
            If currBFC.InsertCurrency(SetCurrModel, logBFC.SetLogHistory(logDesc)) = True Then
                MsgBoxSaved()
                PreCreateDisplayCurr()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub UpdateCurr()
        Dim currBFC As ClsCurrency = New ClsCurrency
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Currency for CurrencyCode = " + txtCurrCode.Text
        Try
            If currBFC.UpdateCurrency(SetCurrModel, logBFC.SetLogHistory(logDesc), displayCurr) = True Then
                MsgBoxUpdated()
                PreCreateDisplayCurr()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub DeleteCurr()
        Dim CurrBFC As ClsCurrency = New ClsCurrency
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Currency for CurrencyCode = " + txtCurrCode.Text + ",update IsActive = False"
        displayCurr = "Delete"
        Try
            If CurrBFC.UpdateCurrency(SetCurrModel, logBFC.SetLogHistory(logDesc), displayCurr) = True Then
                MsgBoxDeleted()
                PreCreateDisplayCurr()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
#End Region

#Region "Other Bank"
    Private Sub txtBankName_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtBankName.KeyPress
        If e.KeyChar = Chr(13) Then
            txtAccountNo.Focus()
        End If
    End Sub

    Private Sub txtAccountNo_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtAccountNo.KeyPress
        If e.KeyChar = Chr(13) Then
            txtAccountName.Focus()
        End If
    End Sub
    Private Sub txtAccountName_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtAccountName.KeyPress
        If e.KeyChar = Chr(13) Then
            txtSwiftCode.Focus()
        End If
    End Sub
    Private Sub txtSwiftCode_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtSwiftCode.KeyPress
        If e.KeyChar = Chr(13) Then
            btnSaveBank.Focus()
        End If
    End Sub
    Private Sub cmbCariBank_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCariBank.SelectedIndexChanged
        txtCariBank.Focus()
    End Sub
    Private Sub cmbCariBank_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCariBank.KeyPress
        e.KeyChar = Chr(0)
    End Sub
    Private Sub txtCariBank_TextChanged(sender As Object, e As EventArgs) Handles txtCariBank.TextChanged
        ListBank(cmbCariBank.Text, txtCariBank.Text)
    End Sub
    Private Sub dgvBank_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvBank.CellClick
        Dim row As Integer = dgvBank.CurrentRow.Index
        bankID = dgvBank.Item(0, row).Value
        txtBankCode.Text = dgvBank.Item(1, row).Value
        txtBankName.Text = dgvBank.Item(2, row).Value
        txtAccountNo.Text = dgvBank.Item(3, row).Value
        txtAccountName.Text = dgvBank.Item(4, row).Value
        txtSwiftCode.Text = dgvBank.Item(5, row).Value

        displayBank = "Update"

        ButtonUpdate()
        EnabledTextBank(True)
    End Sub
#End Region

#Region "Other Curr"
    Private Sub txtCurrName_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtCurrName.KeyPress
        If e.KeyChar = Chr(13) Then
            btnSaveCurr.Focus()
        End If
    End Sub
    Private Sub cmbCariCurr_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCariCurr.SelectedIndexChanged
        txtCariCurr.Focus()
    End Sub
    Private Sub cmbCariCurr_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCariCurr.KeyPress
        e.KeyChar = Chr(0)
    End Sub
    Private Sub txtCariCurr_TextChanged(sender As Object, e As EventArgs) Handles txtCariCurr.TextChanged
        ListCurr(cmbCariCurr.Text, txtCariCurr.Text)
    End Sub
    Private Sub dgvCurr_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgvCurr.CellClick
        Dim row As Integer = dgvCurr.CurrentRow.Index
        currID = dgvCurr.Item(0, row).Value
        txtCurrCode.Text = dgvCurr.Item(1, row).Value
        txtCurrName.Text = dgvCurr.Item(2, row).Value

        displayCurr = "Update"

        ButtonUpdateCurr()
        EnabledTextCurr(True)
    End Sub

#End Region

#Region "Button Bank"
    Private Sub btnAddBank_Click(sender As Object, e As EventArgs) Handles btnAddBank.Click
        EnabledTextBank(True)
        displayBank = "Create"
        ButtonSave()
        txtBankName.Focus()
    End Sub

    Private Sub btnSaveBank_Click(sender As Object, e As EventArgs) Handles btnSaveBank.Click
        If CheckEmptyBank() = False Then
            Try
                Select Case displayBank
                    Case "Create"
                        InsertBank()
                    Case "Update"
                        UpdateBank()
                End Select
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub
    Private Sub btnDeleteBank_Click(sender As Object, e As EventArgs) Handles btnDeleteBank.Click
        If MsgBoxQuestion() = DialogResult.Yes Then
            Try
                DeleteBank()
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub
    Private Sub btnCancelBank_Click(sender As Object, e As EventArgs) Handles btnCancelBank.Click
        PreCreateDisplayBank()
    End Sub
    Private Sub btnExitBank_Click(sender As Object, e As EventArgs) Handles btnExitBank.Click
        Close()
    End Sub
#End Region

#Region "Button Curr"
    Private Sub btnAddCurr_Click(sender As Object, e As EventArgs) Handles btnAddCurr.Click
        EnabledTextCurr(True)
        displayCurr = "Create"
        ButtonSaveCurr()
        txtCurrName.Focus()
    End Sub
    Private Sub btnSaveCurr_Click(sender As Object, e As EventArgs) Handles btnSaveCurr.Click
        If CheckEmptyCurr() = False Then
            Try
                Select Case displayCurr
                    Case "Create"
                        InsertCurr()
                    Case "Update"
                        UpdateCurr()
                End Select
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub
    Private Sub btnDeleteCurr_Click(sender As Object, e As EventArgs) Handles btnDeleteCurr.Click
        If MsgBoxQuestion() = DialogResult.Yes Then
            Try
                DeleteCurr()
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub
    Private Sub btnCancelCurr_Click(sender As Object, e As EventArgs) Handles btnCancelCurr.Click
        PreCreateDisplayCurr()
    End Sub
    Private Sub btnExitCurr_Click(sender As Object, e As EventArgs) Handles btnExitCurr.Click
        Close()
    End Sub
#End Region

    Private Sub FrmSettingBank_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        CheckPermissions()
        PreCreateDisplayBank()
        PreCreateDisplayCurr()
        Text = title
    End Sub
End Class