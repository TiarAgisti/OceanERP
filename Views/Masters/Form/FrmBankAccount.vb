Public Class FrmBankAccount
#Region "Declaration"
    Dim bacID As Integer = 0
    Dim display As String = ""
    Dim isCreate As Boolean = False
    Dim isUpdate As Boolean = False
    Dim isDelete As Boolean = False
#End Region

#Region "Function"
    Sub CheckPermissions()
        Dim roleBFC As ClsPermission = New ClsPermission
        Dim roleModel As RoleDModel = New RoleDModel
        roleModel = roleBFC.RetrieveDetailsByRoleIDMenuID(roleIDUser, Tag)
        If roleModel.IsCreate = True Then isCreate = True
        If roleModel.IsUpdate = True Then isUpdate = True
        If roleModel.IsDelete = True Then isDelete = True
    End Sub
    Sub ClearText()
        txtCode.Text = AutoGenerated
        txtAccName.Clear()
        txtAccNumber.Clear()
        cmbCari.Text = ""
        txtCari.Clear()
    End Sub
    Sub PropertiesGrid()
        With dgv
            .Columns(0).Visible = False

            .Columns(1).HeaderText = "BankAccount Code"
            .Columns(1).Width = 200

            .Columns(2).HeaderText = "Bank"
            .Columns(2).Width = 200

            .Columns(3).HeaderText = "Vendor Desc"
            .Columns(3).Width = 200

            .Columns(4).HeaderText = "Currency"
            .Columns(4).Width = 200

            .Columns(5).HeaderText = "Account Name"
            .Columns(5).Width = 200

            .Columns(6).HeaderText = "Account Number"
            .Columns(6).Width = 200

            .Columns(7).Visible = False
            .Columns(8).Visible = False
            .Columns(9).Visible = False
            .Columns(10).Visible = False
            .Columns(11).Visible = False

        End With
    End Sub
    Sub ListBankAccount(myOptions As String, myParam As String)
        Try
            Dim bacBFC As ClsBankAccount = New ClsBankAccount
            dgv.DataSource = bacBFC.RetrieveList(myOptions, myParam)
            dgv.ReadOnly = True
            PropertiesGrid()
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub ComboBoxSupplier(cmb As ComboBox)
        Dim vendorBFC As ClsVendor = New ClsVendor
        vendorBFC.ComboBoxAllVendor(cmb)
    End Sub
    Sub ComboBoxBank(cmb As ComboBox)
        Dim bankBFC As ClsBank = New ClsBank
        cmb.DataSource = bankBFC.ListComboBoxBank
        cmb.DisplayMember = "Name"
        cmb.ValueMember = "BankID"
    End Sub
    Sub ComboBoxCurrency(cmb As ComboBox)
        Dim curBFC As ClsCurrency = New ClsCurrency
        cmb.DataSource = curBFC.ListComboBoxCurrency
        cmb.DisplayMember = "Name"
        cmb.ValueMember = "CurrencyID"
    End Sub
    Function CheckEmpty() As Boolean
        If txtAccName.Text = String.Empty Then
            MsgBoxWarning("Account Name can't empty")
            txtAccName.Focus()
            Return True
        ElseIf txtAccNumber.Text = String.Empty Then
            MsgBoxWarning("Account Number can't empty")
            txtAccNumber.Focus()
            Return True
        Else
            Return False
        End If
    End Function
    Function SetModel() As BankAccountModel
        Dim bacModel As BankAccountModel = New BankAccountModel
        Dim bacBFC As ClsBankAccount = New ClsBankAccount
        With bacModel
            Select Case display
                Case "Create"
                    .BankAccountID = bacBFC.GeneratedAutoNumber
                    .BankAccountCode = bacBFC.GeneratedCode
                    .BankID = cmbBank.SelectedValue
                    .VendorID = cmbVendor.SelectedValue
                    .CurrencyID = cmbCurrency.SelectedValue
                    .AccountName = txtAccName.Text
                    .AccountNumber = txtAccNumber.Text
                    .IsActive = True
                    .CreatedBy = userID
                    .CreatedDate = DateTime.Now
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                Case "Update"
                    .BankAccountID = bacID
                    .BankID = cmbBank.SelectedValue
                    .VendorID = cmbVendor.SelectedValue
                    .CurrencyID = cmbCurrency.SelectedValue
                    .AccountName = txtAccName.Text
                    .AccountNumber = txtAccNumber.Text
                    .IsActive = True
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                Case Else
                    .BankAccountID = bacID
                    .IsActive = False
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
            End Select
        End With
        Return bacModel
    End Function
    Sub EnabledText(status As Boolean)
        cmbBank.Enabled = status
        cmbVendor.Enabled = status
        cmbCurrency.Enabled = status
        txtAccName.Enabled = status
        txtAccNumber.Enabled = status
    End Sub
    Sub ButtonAdd()
        If isCreate = True Then btnAdd.Enabled = True
        btnSave.Enabled = False
        btnDelete.Enabled = False
        btnCancel.Enabled = False
    End Sub
    Sub ButtonSave()
        btnAdd.Enabled = False
        btnSave.Enabled = True
        btnDelete.Enabled = False
        btnCancel.Enabled = True
    End Sub
    Sub ButtonUpdate()
        btnAdd.Enabled = False
        If isUpdate = True Then btnSave.Enabled = True
        If isDelete = True Then btnDelete.Enabled = True
        btnCancel.Enabled = True
    End Sub
    Sub PreCreateDisplay()
        CheckPermissions()
        ClearText()
        ListBankAccount(cmbCari.Text, txtCari.Text)
        ComboBoxBank(cmbBank)
        ComboBoxCurrency(cmbCurrency)
        ComboBoxSupplier(cmbVendor)
        EnabledText(False)
        ButtonAdd()
        display = ""
        Text = title
    End Sub
    Sub InsertBankAccount()
        Dim bacBFC As ClsBankAccount = New ClsBankAccount
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Create new BankAccount"
        Try
            If bacBFC.InsertBankAccount(SetModel, logBFC.SetLogHistory(logDesc)) = True Then
                MsgBoxSaved()
                PreCreateDisplay()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub UpdateBankAccount()
        Dim bacBFC As ClsBankAccount = New ClsBankAccount
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update BankAccount for Code = " + txtCode.Text
        Try
            If bacBFC.UpdateBankAccount(SetModel, logBFC.SetLogHistory(logDesc), display) = True Then
                MsgBoxUpdated()
                PreCreateDisplay()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub DeleteBankAccount()
        Dim bacBFC As ClsBankAccount = New ClsBankAccount
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update BankAccount for Code = " + txtCode.Text + ",update IsActive = False"
        display = "Delete"
        Try
            If bacBFC.UpdateBankAccount(SetModel, logBFC.SetLogHistory(logDesc), display) = True Then
                MsgBoxDeleted()
                PreCreateDisplay()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
#End Region

#Region "Button"
    Private Sub btnAdd_Click(sender As Object, e As EventArgs) Handles btnAdd.Click
        EnabledText(True)
        display = "Create"
        ButtonSave()
        cmbBank.Focus()
    End Sub

    Private Sub btnSave_Click(sender As Object, e As EventArgs) Handles btnSave.Click
        If CheckEmpty() = False Then
            Try
                Select Case display
                    Case "Create"
                        InsertBankAccount()
                    Case "Update"
                        UpdateBankAccount()
                End Select
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub

    Private Sub btnDelete_Click(sender As Object, e As EventArgs) Handles btnDelete.Click
        If MsgBoxQuestion() = DialogResult.Yes Then
            Try
                DeleteBankAccount()
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub

    Private Sub btnCancel_Click(sender As Object, e As EventArgs) Handles btnCancel.Click
        PreCreateDisplay()
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        Close()
    End Sub
#End Region

#Region "Other"
    Private Sub cmbBank_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbBank.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbBank_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbBank.SelectedIndexChanged
        cmbVendor.Focus()
    End Sub

    Private Sub cmbVendor_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbVendor.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbVendor_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbVendor.SelectedIndexChanged
        cmbCurrency.Focus()
    End Sub

    Private Sub cmbCurrency_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCurrency.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbCurrency_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCurrency.SelectedIndexChanged
        txtAccName.Focus()
    End Sub

    Private Sub txtAccName_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtAccName.KeyPress
        If e.KeyChar = Chr(13) Then
            txtAccNumber.Focus()
        End If
    End Sub

    Private Sub txtAccNumber_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtAccNumber.KeyPress
        If e.KeyChar = Chr(13) Then
            btnSave.Focus()
        End If
    End Sub

    Private Sub txtAccNumber_TextChanged(sender As Object, e As EventArgs) Handles txtAccNumber.TextChanged
        If txtAccNumber.Text = "" Then
            txtAccNumber.Text = ""
        Else
            If ValidationNumber(txtAccNumber) = False Then
                txtAccNumber.Clear()
            End If
        End If
    End Sub

    Private Sub cmbCari_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCari.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub cmbCari_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCari.SelectedIndexChanged
        txtCari.Focus()
    End Sub

    Private Sub txtCari_TextChanged(sender As Object, e As EventArgs) Handles txtCari.TextChanged
        ListBankAccount(cmbCari.Text, txtCari.Text)
    End Sub
    Private Sub dgv_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv.CellClick
        ComboBoxBank(cmbBank)
        ComboBoxSupplier(cmbVendor)
        ComboBoxCurrency(cmbCurrency)
        With dgv
            If .RowCount > 1 Then
                Dim row As Integer = .CurrentRow.Index
                bacID = .Item(0, row).Value
                txtCode.Text = .Item(1, row).Value
                cmbBank.SelectedValue = .Item(7, row).Value
                cmbVendor.SelectedValue = .Item(8, row).Value
                cmbCurrency.SelectedValue = .Item(9, row).Value
                txtAccName.Text = .Item(5, row).Value
                txtAccNumber.Text = .Item(6, row).Value
                display = "Update"

                ButtonUpdate()
                EnabledText(True)
            End If
        End With
    End Sub

    Private Sub FrmBankAccount_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        PreCreateDisplay()
    End Sub
#End Region
End Class