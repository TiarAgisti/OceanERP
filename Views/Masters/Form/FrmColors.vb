Public Class FrmColors
#Region "Declaration"
    Dim colorID As Integer = 0
    Dim display As String = ""
    Dim isCreate As Boolean = False
    Dim isUpdate As Boolean = False
    Dim isDelete As Boolean = False
    Dim colorName As String = ""
#End Region

#Region "Function"
    Sub ClearText()
        txtCode.Text = AutoGenerated
        txtName.Clear()
        txtDesc.Clear()
        cmbCari.Text = ""
        txtCari.Clear()
        colorName = ""
    End Sub
    Sub PropertiesGrid()
        With dgv
            .Columns(0).Visible = False
            .Columns(1).HeaderText = "Color Code"
            .Columns(1).Width = 200
            .Columns(2).HeaderText = "Color Name"
            .Columns(2).Width = 200
            .Columns(3).HeaderText = "Description"
            .Columns(3).Width = 200
            .Columns(4).Visible = False
            .Columns(5).Visible = False
            .Columns(6).Visible = False
            .Columns(7).Visible = False
            .Columns(8).Visible = False
        End With
    End Sub

    Sub ListColor(myOptions As String, myParam As String)
        Try
            Dim colorBFC As ClsColor = New ClsColor
            With dgv
                .DataSource = colorBFC.RetrieveList(myOptions, myParam)
            End With
            PropertiesGrid()
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub

    Sub EnabledText(status As Boolean)
        txtName.Enabled = status
        txtDesc.Enabled = status
    End Sub
    Sub CheckPermissions()
        Dim roleBFC As ClsPermission = New ClsPermission
        Dim roleModel As RoleDModel = New RoleDModel
        roleModel = roleBFC.RetrieveDetailsByRoleIDMenuID(roleIDUser, Tag)
        If roleModel.IsCreate = True Then isCreate = True
        If roleModel.IsUpdate = True Then isUpdate = True
        If roleModel.IsDelete = True Then isDelete = True
    End Sub
    Sub ButtonAdd()
        If isCreate = True Then btnAdd.Enabled = True
        btnSave.Enabled = False
        btnDelete.Enabled = False
        btnCancel.Enabled = False
    End Sub
    Sub ButtonSave()
        btnAdd.Enabled = False
        btnSave.Enabled = True
        btnDelete.Enabled = False
        btnCancel.Enabled = True
    End Sub
    Sub ButtonUpdate()
        btnAdd.Enabled = False
        If isUpdate = True Then btnSave.Enabled = True
        If isDelete = True Then btnDelete.Enabled = True
        btnCancel.Enabled = True
    End Sub
    Sub PreCreateDisplay()
        CheckPermissions()
        ClearText()
        ListColor(cmbCari.Text, txtCari.Text)
        EnabledText(False)
        ButtonAdd()
        display = ""
        btnAdd.Focus()
        Text = title
    End Sub
    Function CheckEmpty() As Boolean
        If txtName.Text = String.Empty Then
            MsgBoxWarning("Name can't empty")
            txtName.Focus()
            Return True
        ElseIf txtDesc.Text = String.Empty Then
            MsgBoxWarning("Description can't empty")
            txtDesc.Focus()
            Return True
        Else
            Return False
        End If
    End Function
    Function SetModel() As ColorModel
        Dim colorModel As ColorModel = New ColorModel
        Dim colorBFC As ClsColor = New ClsColor
        Select Case display
            Case "Create"
                With colorModel
                    .ColorID = colorBFC.GeneratedAutoNumber
                    .ColorCode = colorBFC.GeneratedCode
                    .ColorName = txtName.Text
                    .Description = txtDesc.Text
                    .IsActive = True
                    .CreatedBy = userID
                    .CreatedDate = DateTime.Now
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                End With
            Case "Update"
                With colorModel
                    .ColorID = colorID
                    .ColorName = txtName.Text
                    .Description = txtDesc.Text
                    .IsActive = True
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                End With
            Case Else
                With colorModel
                    .ColorID = colorID
                    .IsActive = False
                    .UpdatedBy = userID
                    .UpdatedDate = DateTime.Now
                End With
        End Select
        Return colorModel
    End Function
    Sub InsertColor()
        Dim colorBFC As ClsColor = New ClsColor
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Create new Color,Color name is " + txtName.Text
        Try
            If colorBFC.GetValidateName(txtName.Text) = True Then
                If colorBFC.InsertColor(SetModel, logBFC.SetLogHistory(logDesc)) = True Then
                    MsgBoxSaved()
                    PreCreateDisplay()
                End If
            Else
                MsgBoxError("Color name cant duplicate")
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub UpdateColor()
        Dim colorBFC As ClsColor = New ClsColor
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Color for ColorCode = " + txtCode.Text
        Try
            If txtName.Text = colorName Then
                If colorBFC.UpdateColor(SetModel, logBFC.SetLogHistory(logDesc), display) = True Then
                    MsgBoxUpdated()
                    PreCreateDisplay()
                End If
            ElseIf txtName.Text <> colorName Then
                If colorBFC.GetValidateName(txtName.Text) = True Then
                    If colorBFC.UpdateColor(SetModel, logBFC.SetLogHistory(logDesc), display) = True Then
                        MsgBoxUpdated()
                        PreCreateDisplay()
                    End If
                Else
                    MsgBoxError("Color name cant duplicate")
                End If
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
    Sub DeleteColor()
        Dim colorBFC As ClsColor = New ClsColor
        Dim logBFC As ClsLogHistory = New ClsLogHistory
        Dim logDesc As String = "Update Color for ColorCode = " + txtCode.Text + ",update IsActive = False"
        display = "Delete"
        Try
            If colorBFC.UpdateColor(SetModel, logBFC.SetLogHistory(logDesc), display) = True Then
                MsgBoxDeleted()
                PreCreateDisplay()
            End If
        Catch ex As Exception
            MsgBoxError(ex.Message)
        End Try
    End Sub
#End Region

#Region "Button"
    Private Sub btnAdd_Click(sender As Object, e As EventArgs) Handles btnAdd.Click
        EnabledText(True)
        display = "Create"
        ButtonSave()
        txtName.Focus()
    End Sub

    Private Sub btnSave_Click(sender As Object, e As EventArgs) Handles btnSave.Click
        If CheckEmpty() = False Then
            Try
                Select Case display
                    Case "Create"
                        InsertColor()
                    Case "Update"
                        UpdateColor()
                End Select
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub

    Private Sub btnDelete_Click(sender As Object, e As EventArgs) Handles btnDelete.Click
        If MsgBoxQuestion() = DialogResult.Yes Then
            Try
                DeleteColor()
            Catch ex As Exception
                MsgBoxError(ex.Message)
            End Try
        End If
    End Sub

    Private Sub btnCancel_Click(sender As Object, e As EventArgs) Handles btnCancel.Click
        PreCreateDisplay()
    End Sub

    Private Sub btnExit_Click(sender As Object, e As EventArgs) Handles btnExit.Click
        Close()
    End Sub
#End Region

#Region "Other"
    Private Sub txtName_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtName.KeyPress
        If e.KeyChar = Chr(13) Then
            txtDesc.Focus()
        End If
    End Sub

    Private Sub txtDesc_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtDesc.KeyPress
        If e.KeyChar = Chr(13) Then
            btnSave.Focus()
        End If
    End Sub
    Private Sub cmbCari_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cmbCari.SelectedIndexChanged
        txtCari.Focus()
    End Sub

    Private Sub cmbCari_KeyPress(sender As Object, e As KeyPressEventArgs) Handles cmbCari.KeyPress
        e.KeyChar = Chr(0)
    End Sub

    Private Sub txtCari_TextChanged(sender As Object, e As EventArgs) Handles txtCari.TextChanged
        ListColor(cmbCari.Text, txtCari.Text)
    End Sub
    Private Sub dgv_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles dgv.CellClick
        With dgv
            Dim row As Integer = .CurrentRow.Index
            colorID = .Item(0, row).Value
            txtCode.Text = .Item(1, row).Value
            txtName.Text = .Item(2, row).Value
            txtDesc.Text = .Item(3, row).Value
        End With

        display = "Update"

        ButtonUpdate()
        EnabledText(True)
    End Sub
    Private Sub FrmColors_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        PreCreateDisplay()
    End Sub
#End Region
End Class